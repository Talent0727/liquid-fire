{{!-- template-lint-disable no-unbalanced-curlies --}}

<h2>
  DOM & Template Constraints
</h2>

<p>
  These constraints let you target a transition rule based on the
surrounding DOM and/or template.
</p>

<dl class="dl-horizontal">
  <dt>
    hasClass
  </dt>
  <dd>
    <p>
      Takes a class name and matches it against the animated
    element. For example, this transition:
    </p>

    <CodeSnippet @name="has-class-example.js" />

    <p>
      Will match an animated element like this one:
    </p>

    <CodeSnippet @name="has-class-example.hbs" />
  </dd>

  <dt>
    matchSelector
  </dt>
  <dd>
    <p>
      Takes a CSS selector and tests whether the animated element matches the selector. For example, this rule:
    </p>

    <CodeSnippet @name="match-selector-example.js" />

    <p>
      Will match against this template:
    </p>

    <CodeSnippet @name="match-selector-example.hbs" />
  </dd>

  <dt>
    childOf
  </dt>
  <dd>
    <p>
      Takes a CSS selector and tests whether the animated element's
    parent matches the selector. For example, this rule:
    </p>

    <CodeSnippet @name="child-of-example.js" />

    <p>
      Will match against this template:
    </p>

    <CodeSnippet @name="child-of-example.hbs" />
  </dd>

  <dt>
    inHelper
  </dt>
  <dd>
    <p>
      Takes the name of a helper, and matches only within that kind
    of helper. For example,
      <code>
        this.inHelper('liquid-if')
      </code>
      will constrain the rule to only apply to
      <code>
        \{{#liquid-if}}
      </code>
      .
    </p>
  </dd>
</dl>